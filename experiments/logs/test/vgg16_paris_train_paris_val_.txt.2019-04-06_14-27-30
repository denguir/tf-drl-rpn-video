+ echo Logging output to experiments/logs/test/vgg16_paris_train_paris_val_.txt.2019-04-06_14-27-30
Logging output to experiments/logs/test/vgg16_paris_train_paris_val_.txt.2019-04-06_14-27-30
+ case ${DATASET} in
+ WEIGHTS_PATH=/home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt
+ [[ ! -z '' ]]
+ CUDA_VISIBLE_DEVICES=0
+ time python ./tools/test_net.py --imdb paris_val --model /home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt --cfg experiments/cfgs/drl-rpn-vgg16.yml --net vgg16 --use_hist 1 --use_post 0 --nbr_fix 0 --set NBR_CLASSES 21 ANCHOR_SCALES '[4,8,16]' ANCHOR_RATIOS '[0.5,1,2]'
Called with args:
Namespace(cfg_file='experiments/cfgs/drl-rpn-vgg16.yml', comp_mode=False, imdb_name='paris_val', max_per_image=100, model='/home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt', nbr_fix=0, net='vgg16', set_cfgs=['NBR_CLASSES', '21', 'ANCHOR_SCALES', '[4,8,16]', 'ANCHOR_RATIOS', '[0.5,1,2]'], tag='', use_hist=1, use_post=0)
Using config:
{'ANCHOR_RATIOS': [0.5, 1, 2],
 'ANCHOR_SCALES': [4, 8, 16],
 'CLASS_NAMES': [],
 'COCO_TO_PASCAL': [0,
                    5,
                    2,
                    15,
                    9,
                    40,
                    6,
                    3,
                    16,
                    57,
                    20,
                    61,
                    17,
                    18,
                    4,
                    1,
                    59,
                    19,
                    58,
                    7,
                    63],
 'DATA_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf/data',
 'DIMS_AUX': 39,
 'DIMS_BASE': 512,
 'DIMS_NONHIST': 530,
 'DIMS_TOT': 551,
 'DRL_RPN': {'H_FIXRECT': 0.25,
             'H_HIST': 3,
             'H_SCALE': 0.5,
             'MAX_ITER_TRAJ': 13,
             'MAX_ITER_TRAJ_FLT': 13.0,
             'TOPK_OBJNESS': 0,
             'USE_AGNO': False,
             'USE_HIST': True,
             'USE_POST': False,
             'W_FIXRECT': 0.25,
             'W_HIST': 3,
             'W_SCALE': 0.5},
 'DRL_RPN_TEST': {'BETA': 0.05,
                  'DO_VISUALIZE': False,
                  'NBR_FIX': 0,
                  'RANDOM_DONE': False,
                  'RANDOM_FIX': False},
 'DRL_RPN_TRAIN': {'BATCH_SIZE': 50,
                   'BETAS': [-1, 0.9],
                   'DET_START': -1,
                   'DISPLAY': 50,
                   'GAMMA': 0.2,
                   'IMG_START_IDX': -1,
                   'IOU_THRESH': 0.5,
                   'LEARNING_RATE': 2e-05,
                   'MA_WEIGHT': 0.0005,
                   'POST_BETAS': [0.05, 0.35],
                   'POST_LR': 0.001,
                   'POST_SS': [80000],
                   'STEPSIZE': 90000,
                   'USE_BL': True,
                   'USE_FLIPPED': True,
                   'USE_POST': 0},
 'EXP_DIR': 'vgg16_drl_rpn',
 'MATLAB': 'matlab',
 'MEANS_BBOX': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'NBR_ANCHORS': 9,
 'NBR_CLASSES': 21,
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'POOLING_MODE': 'crop',
 'POOLING_SIZE': 7,
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf',
 'RPN_CHANNELS': 512,
 'STDS_BBOX': array([0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1,
       0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1,
       0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2,
       0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2,
       0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1,
       0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1,
       0.2, 0.2, 0.1, 0.1, 0.2, 0.2]),
 'TEST': {'BBOX_REG': True,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'MODE': 'nms',
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'gt',
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'RPN_TOP_N': 5000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': False,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'BIAS_DECAY': False,
           'DISPLAY': 50,
           'DOUBLE_BIAS': False,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.00025,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 128,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_KEPT': 3,
           'SNAPSHOT_PREFIX': 'vgg16_drl_rpn',
           'STEPSIZE': [80000],
           'SUMMARY_INTERVAL': 180,
           'TRUNCATED': False,
           'USE_ALL_GT': True,
           'USE_FLIPPED': True,
           'USE_GT': False,
           'WEIGHT_DECAY': 0.0001},
 'USE_GPU_NMS': True,
 'VIS_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf/img-out'}
paris_val
2019-04-06 14:27:39.592049: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcuda.so.1
2019-04-06 14:27:39.733481: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1009] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-04-06 14:27:39.764713: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x560c938d1560 executing computations on platform CUDA. Devices:
2019-04-06 14:27:39.764745: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): GeForce RTX 2070, Compute Capability 7.5
2019-04-06 14:27:39.784741: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3392280000 Hz
2019-04-06 14:27:39.785097: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x560c93c62440 executing computations on platform Host. Devices:
2019-04-06 14:27:39.785136: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): <undefined>, <undefined>
2019-04-06 14:27:39.785860: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1551] Found device 0 with properties: 
name: GeForce RTX 2070 major: 7 minor: 5 memoryClockRate(GHz): 1.62
pciBusID: 0000:01:00.0
totalMemory: 7.76GiB freeMemory: 7.21GiB
2019-04-06 14:27:39.785890: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1674] Adding visible gpu devices: 0
2019-04-06 14:27:39.785997: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudart.so.10.0
2019-04-06 14:27:39.787672: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1082] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-04-06 14:27:39.787697: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1088]      0 
2019-04-06 14:27:39.787708: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1101] 0:   N 
2019-04-06 14:27:39.788363: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1222] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 7155 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2070, pci bus id: 0000:01:00.0, compute capability: 7.5)
WARNING: Logging before flag parsing goes to stderr.
W0406 14:27:40.004381 140313371830080 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:222: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.cast` instead.
W0406 14:27:40.008843 140313371830080 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:231: py_func (from tensorflow.python.ops.script_ops) is deprecated and will be removed in a future version.
Instructions for updating:
tf.py_func is deprecated in TF V2. Instead, there are two
    options available in V2.
    - tf.py_function takes a python function which manipulates tf eager
    tensors instead of numpy arrays. It's easy to convert a tf eager tensor to
    an ndarray (just call tensor.numpy()) but having access to eager tensors
    means `tf.py_function`s can use accelerators such as GPUs as well as
    being differentiable using a gradient tape.
    - tf.numpy_function maintains the semantics of the deprecated tf.py_func
    (it is not differentiable, and manipulates numpy arrays). It drops the
    stateful argument making all functions stateful.
    
W0406 14:27:40.088395 140313371830080 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:128: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.cast` instead.
W0406 14:27:40.103745 140313371830080 deprecation.py:506] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:141: calling crop_and_resize_v1 (from tensorflow.python.ops.image_ops_impl) with box_ind is deprecated and will be removed in a future version.
Instructions for updating:
box_ind is deprecated, use box_indices instead
W0406 14:27:40.106657 140313371830080 deprecation.py:323] From /home/vador/anaconda3/envs/tf10/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/layers.py:1624: flatten (from tensorflow.python.layers.core) is deprecated and will be removed in a future version.
Instructions for updating:
Use keras.layers.flatten instead.
Loading model check point from /home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt
W0406 14:27:40.457198 140313371830080 deprecation.py:323] From /home/vador/anaconda3/envs/tf10/lib/python3.6/site-packages/tensorflow/python/training/saver.py:1276: checkpoint_exists (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.
Instructions for updating:
Use standard file APIs to check for files with this prefix.
Loaded.
paris_val gt roidb loaded from /home/vador/Documents/project/AI/drl-rpn-tf/data/cache/paris_val_gt_roidb.pkl
2019-04-06 14:27:41.543675: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudnn.so.7
2019-04-06 14:27:42.933362: E tensorflow/stream_executor/cuda/cuda_driver.cc:835] failed to allocate 3.86G (4147013120 bytes) from device: CUDA_ERROR_OUT_OF_MEMORY: out of memory
2019-04-06 14:27:43.932261: E tensorflow/core/grappler/optimizers/dependency_optimizer.cc:697] Iteration = 0, topological sort failed with message: The graph couldn't be sorted in topological order.
2019-04-06 14:27:43.933356: E tensorflow/core/grappler/optimizers/dependency_optimizer.cc:697] Iteration = 1, topological sort failed with message: The graph couldn't be sorted in topological order.
2019-04-06 14:27:43.961330: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcublas.so.10.0
Mean #fix/img (tot, MA):    (12.000000, 0.006000)
Mean exploration (tot, MA): (0.608421, 0.000304)

im_detect: 1/150 3.473s 0.196s
Mean #fix/img (tot, MA):    (12.000000, 0.011997)
Mean exploration (tot, MA): (0.619474, 0.000619)

im_detect: 2/150 2.069s 0.200s
Mean #fix/img (tot, MA):    (12.000000, 0.017991)
Mean exploration (tot, MA): (0.612281, 0.000918)

im_detect: 3/150 1.594s 0.196s
Mean #fix/img (tot, MA):    (12.000000, 0.023982)
Mean exploration (tot, MA): (0.605789, 0.001211)

im_detect: 4/150 1.356s 0.191s
Mean #fix/img (tot, MA):    (12.000000, 0.029970)
Mean exploration (tot, MA): (0.603158, 0.001506)

im_detect: 5/150 1.213s 0.190s
Mean #fix/img (tot, MA):    (12.000000, 0.035955)
Mean exploration (tot, MA): (0.597719, 0.001791)

im_detect: 6/150 1.113s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.041937)
Mean exploration (tot, MA): (0.601804, 0.002103)

im_detect: 7/150 1.048s 0.189s
Mean #fix/img (tot, MA):    (12.000000, 0.047916)
Mean exploration (tot, MA): (0.603158, 0.002408)

im_detect: 8/150 0.999s 0.190s
Mean #fix/img (tot, MA):    (12.000000, 0.053892)
Mean exploration (tot, MA): (0.604210, 0.002714)

im_detect: 9/150 0.960s 0.190s
Mean #fix/img (tot, MA):    (12.000000, 0.059865)
Mean exploration (tot, MA): (0.600737, 0.002997)

im_detect: 10/150 0.926s 0.189s
Mean #fix/img (tot, MA):    (12.000000, 0.065835)
Mean exploration (tot, MA): (0.601244, 0.003299)

im_detect: 11/150 0.903s 0.189s
Mean #fix/img (tot, MA):    (12.000000, 0.071802)
Mean exploration (tot, MA): (0.602719, 0.003606)

im_detect: 12/150 0.883s 0.190s
Mean #fix/img (tot, MA):    (12.000000, 0.077766)
Mean exploration (tot, MA): (0.599109, 0.003882)

im_detect: 13/150 0.863s 0.188s
Mean #fix/img (tot, MA):    (12.000000, 0.083728)
Mean exploration (tot, MA): (0.596767, 0.004164)

im_detect: 14/150 0.846s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.089686)
Mean exploration (tot, MA): (0.596351, 0.004457)

im_detect: 15/150 0.832s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.095641)
Mean exploration (tot, MA): (0.596513, 0.004754)

im_detect: 16/150 0.820s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.101593)
Mean exploration (tot, MA): (0.595851, 0.005044)

im_detect: 17/150 0.810s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.107542)
Mean exploration (tot, MA): (0.594503, 0.005328)

im_detect: 18/150 0.800s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.113488)
Mean exploration (tot, MA): (0.594294, 0.005620)

im_detect: 19/150 0.792s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.119432)
Mean exploration (tot, MA): (0.595526, 0.005927)

im_detect: 20/150 0.785s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.125372)
Mean exploration (tot, MA): (0.594286, 0.006209)

im_detect: 21/150 0.777s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.131309)
Mean exploration (tot, MA): (0.593732, 0.006497)

im_detect: 22/150 0.772s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.137244)
Mean exploration (tot, MA): (0.592769, 0.006779)

im_detect: 23/150 0.766s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.143175)
Mean exploration (tot, MA): (0.591930, 0.007062)

im_detect: 24/150 0.760s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.149103)
Mean exploration (tot, MA): (0.591958, 0.007355)

im_detect: 25/150 0.755s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.155029)
Mean exploration (tot, MA): (0.591660, 0.007643)

im_detect: 26/150 0.751s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.160951)
Mean exploration (tot, MA): (0.592203, 0.007943)

im_detect: 27/150 0.747s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.166871)
Mean exploration (tot, MA): (0.592180, 0.008234)

im_detect: 28/150 0.744s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.172787)
Mean exploration (tot, MA): (0.593249, 0.008542)

im_detect: 29/150 0.741s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.178701)
Mean exploration (tot, MA): (0.592947, 0.008830)

im_detect: 30/150 0.738s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.184612)
Mean exploration (tot, MA): (0.592122, 0.009109)

im_detect: 31/150 0.734s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.190519)
Mean exploration (tot, MA): (0.591283, 0.009387)

im_detect: 32/150 0.731s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.196424)
Mean exploration (tot, MA): (0.592249, 0.009694)

im_detect: 33/150 0.729s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.202326)
Mean exploration (tot, MA): (0.593901, 0.010013)

im_detect: 34/150 0.728s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.208225)
Mean exploration (tot, MA): (0.594286, 0.010312)

im_detect: 35/150 0.726s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.214121)
Mean exploration (tot, MA): (0.594269, 0.010604)

im_detect: 36/150 0.723s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.220014)
Mean exploration (tot, MA): (0.593257, 0.010877)

im_detect: 37/150 0.720s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.225904)
Mean exploration (tot, MA): (0.592881, 0.011161)

im_detect: 38/150 0.718s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.231791)
Mean exploration (tot, MA): (0.592011, 0.011435)

im_detect: 39/150 0.716s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.237675)
Mean exploration (tot, MA): (0.591842, 0.011722)

im_detect: 40/150 0.714s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.243556)
Mean exploration (tot, MA): (0.591682, 0.012008)

im_detect: 41/150 0.712s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.249434)
Mean exploration (tot, MA): (0.591880, 0.012302)

im_detect: 42/150 0.711s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.255309)
Mean exploration (tot, MA): (0.591848, 0.012592)

im_detect: 43/150 0.709s 0.184s
Mean #fix/img (tot, MA):    (12.000000, 0.261182)
Mean exploration (tot, MA): (0.592895, 0.012904)

im_detect: 44/150 0.708s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.267051)
Mean exploration (tot, MA): (0.592819, 0.013192)

im_detect: 45/150 0.707s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.272918)
Mean exploration (tot, MA): (0.592563, 0.013476)

im_detect: 46/150 0.705s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.278781)
Mean exploration (tot, MA): (0.592654, 0.013768)

im_detect: 47/150 0.704s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.284642)
Mean exploration (tot, MA): (0.592939, 0.014064)

im_detect: 48/150 0.703s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.290499)
Mean exploration (tot, MA): (0.593512, 0.014368)

im_detect: 49/150 0.703s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.296354)
Mean exploration (tot, MA): (0.593642, 0.014661)

im_detect: 50/150 0.702s 0.185s
Mean #fix/img (tot, MA):    (12.000000, 0.302206)
Mean exploration (tot, MA): (0.593973, 0.014959)

im_detect: 51/150 0.701s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.308055)
Mean exploration (tot, MA): (0.594049, 0.015250)

im_detect: 52/150 0.700s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.313901)
Mean exploration (tot, MA): (0.594558, 0.015553)

im_detect: 53/150 0.700s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.319744)
Mean exploration (tot, MA): (0.594893, 0.015852)

im_detect: 54/150 0.699s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.325584)
Mean exploration (tot, MA): (0.595311, 0.016153)

im_detect: 55/150 0.699s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.331421)
Mean exploration (tot, MA): (0.595883, 0.016458)

im_detect: 56/150 0.698s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.337256)
Mean exploration (tot, MA): (0.595439, 0.016735)

im_detect: 57/150 0.697s 0.186s
Mean #fix/img (tot, MA):    (12.000000, 0.343087)
Mean exploration (tot, MA): (0.595662, 0.017031)

im_detect: 58/150 0.697s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.348915)
Mean exploration (tot, MA): (0.595950, 0.017329)

im_detect: 59/150 0.696s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.354741)
Mean exploration (tot, MA): (0.596719, 0.017641)

im_detect: 60/150 0.696s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.360564)
Mean exploration (tot, MA): (0.596911, 0.017937)

im_detect: 61/150 0.696s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.366383)
Mean exploration (tot, MA): (0.596910, 0.018226)

im_detect: 62/150 0.695s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.372200)
Mean exploration (tot, MA): (0.597393, 0.018531)

im_detect: 63/150 0.695s 0.187s
Mean #fix/img (tot, MA):    (12.000000, 0.378014)
Mean exploration (tot, MA): (0.597730, 0.018831)

im_detect: 64/150 0.695s 0.188s
Mean #fix/img (tot, MA):    (12.000000, 0.383825)
Mean exploration (tot, MA): (0.598510, 0.019146)

im_detect: 65/150 0.694s 0.188s
Mean #fix/img (tot, MA):    (11.833333, 0.384133)
Mean exploration (tot, MA): (0.590080, 0.019157)

im_detect: 66/150 0.686s 0.185s
Mean #fix/img (tot, MA):    (11.835820, 0.389941)
Mean exploration (tot, MA): (0.590008, 0.019440)

im_detect: 67/150 0.685s 0.185s
Mean #fix/img (tot, MA):    (11.838235, 0.395746)
Mean exploration (tot, MA): (0.589814, 0.019719)

im_detect: 68/150 0.684s 0.185s
Mean #fix/img (tot, MA):    (11.840579, 0.401548)
Mean exploration (tot, MA): (0.590175, 0.020016)

im_detect: 69/150 0.684s 0.185s
Mean #fix/img (tot, MA):    (11.842856, 0.407347)
Mean exploration (tot, MA): (0.590586, 0.020316)

im_detect: 70/150 0.684s 0.185s
Mean #fix/img (tot, MA):    (11.690140, 0.407644)
Mean exploration (tot, MA): (0.583158, 0.020337)

im_detect: 71/150 0.676s 0.183s
Mean #fix/img (tot, MA):    (11.694444, 0.413440)
Mean exploration (tot, MA): (0.583026, 0.020614)

im_detect: 72/150 0.675s 0.183s
Mean #fix/img (tot, MA):    (11.698629, 0.419233)
Mean exploration (tot, MA): (0.583547, 0.020914)

im_detect: 73/150 0.675s 0.183s
Mean #fix/img (tot, MA):    (11.702702, 0.425024)
Mean exploration (tot, MA): (0.583741, 0.021203)

im_detect: 74/150 0.675s 0.183s
Mean #fix/img (tot, MA):    (11.706666, 0.430811)
Mean exploration (tot, MA): (0.584098, 0.021497)

im_detect: 75/150 0.674s 0.183s
Mean #fix/img (tot, MA):    (11.710526, 0.436596)
Mean exploration (tot, MA): (0.583684, 0.021763)

im_detect: 76/150 0.674s 0.183s
Mean #fix/img (tot, MA):    (11.714285, 0.442377)
Mean exploration (tot, MA): (0.584224, 0.022065)

im_detect: 77/150 0.674s 0.183s
Mean #fix/img (tot, MA):    (11.717948, 0.448156)
Mean exploration (tot, MA): (0.584116, 0.022341)

im_detect: 78/150 0.674s 0.183s
Mean #fix/img (tot, MA):    (11.721519, 0.453932)
Mean exploration (tot, MA): (0.584557, 0.022640)

im_detect: 79/150 0.673s 0.183s
Mean #fix/img (tot, MA):    (11.724999, 0.459705)
Mean exploration (tot, MA): (0.584671, 0.022925)

im_detect: 80/150 0.673s 0.183s
Mean #fix/img (tot, MA):    (11.728395, 0.465475)
Mean exploration (tot, MA): (0.584171, 0.023186)

im_detect: 81/150 0.672s 0.183s
Mean #fix/img (tot, MA):    (11.597561, 0.465743)
Mean exploration (tot, MA): (0.577561, 0.023195)

im_detect: 82/150 0.665s 0.181s
Mean #fix/img (tot, MA):    (11.602409, 0.471510)
Mean exploration (tot, MA): (0.578060, 0.023493)

im_detect: 83/150 0.666s 0.181s
Mean #fix/img (tot, MA):    (11.476191, 0.471774)
Mean exploration (tot, MA): (0.571679, 0.023503)

im_detect: 84/150 0.659s 0.179s
Mean #fix/img (tot, MA):    (11.352942, 0.472038)
Mean exploration (tot, MA): (0.565449, 0.023512)

im_detect: 85/150 0.652s 0.177s
Mean #fix/img (tot, MA):    (11.360465, 0.477802)
Mean exploration (tot, MA): (0.565288, 0.023776)

im_detect: 86/150 0.652s 0.177s
Mean #fix/img (tot, MA):    (11.241379, 0.478063)
Mean exploration (tot, MA): (0.559395, 0.023790)

im_detect: 87/150 0.646s 0.175s
Mean #fix/img (tot, MA):    (11.249999, 0.483824)
Mean exploration (tot, MA): (0.560024, 0.024086)

im_detect: 88/150 0.646s 0.175s
Mean #fix/img (tot, MA):    (11.258426, 0.489582)
Mean exploration (tot, MA): (0.560260, 0.024364)

im_detect: 89/150 0.646s 0.175s
Mean #fix/img (tot, MA):    (11.266665, 0.495337)
Mean exploration (tot, MA): (0.561006, 0.024666)

im_detect: 90/150 0.646s 0.176s
Mean #fix/img (tot, MA):    (11.274724, 0.501090)
Mean exploration (tot, MA): (0.561550, 0.024959)

im_detect: 91/150 0.647s 0.176s
Mean #fix/img (tot, MA):    (11.282607, 0.506839)
Mean exploration (tot, MA): (0.562151, 0.025255)

im_detect: 92/150 0.647s 0.176s
Mean #fix/img (tot, MA):    (11.290321, 0.512586)
Mean exploration (tot, MA): (0.562830, 0.025555)

im_detect: 93/150 0.648s 0.176s
Mean #fix/img (tot, MA):    (11.297872, 0.518329)
Mean exploration (tot, MA): (0.563326, 0.025847)

im_detect: 94/150 0.648s 0.177s
Mean #fix/img (tot, MA):    (11.305263, 0.524070)
Mean exploration (tot, MA): (0.564355, 0.026164)

im_detect: 95/150 0.649s 0.177s
Mean #fix/img (tot, MA):    (11.312499, 0.529808)
Mean exploration (tot, MA): (0.564474, 0.026439)

im_detect: 96/150 0.649s 0.177s
Mean #fix/img (tot, MA):    (11.319587, 0.535543)
Mean exploration (tot, MA): (0.564710, 0.026720)

im_detect: 97/150 0.649s 0.177s
Mean #fix/img (tot, MA):    (11.326530, 0.541276)
Mean exploration (tot, MA): (0.565166, 0.027011)

im_detect: 98/150 0.649s 0.177s
Mean #fix/img (tot, MA):    (11.333332, 0.547005)
Mean exploration (tot, MA): (0.565550, 0.027299)

im_detect: 99/150 0.649s 0.177s
Mean #fix/img (tot, MA):    (11.339999, 0.552731)
Mean exploration (tot, MA): (0.565905, 0.027586)

im_detect: 100/150 0.649s 0.177s
Mean #fix/img (tot, MA):    (11.346534, 0.558455)
Mean exploration (tot, MA): (0.566222, 0.027871)

im_detect: 101/150 0.649s 0.178s
Mean #fix/img (tot, MA):    (11.352941, 0.564176)
Mean exploration (tot, MA): (0.566749, 0.028167)

im_detect: 102/150 0.650s 0.178s
Mean #fix/img (tot, MA):    (11.359222, 0.569894)
Mean exploration (tot, MA): (0.567379, 0.028469)

im_detect: 103/150 0.650s 0.178s
Mean #fix/img (tot, MA):    (11.365384, 0.575609)
Mean exploration (tot, MA): (0.568138, 0.028778)

im_detect: 104/150 0.650s 0.178s
Mean #fix/img (tot, MA):    (11.371428, 0.581321)
Mean exploration (tot, MA): (0.568431, 0.029063)

im_detect: 105/150 0.650s 0.179s
Mean #fix/img (tot, MA):    (11.273584, 0.581530)
Mean exploration (tot, MA): (0.563565, 0.029075)

im_detect: 106/150 0.645s 0.177s
Mean #fix/img (tot, MA):    (11.280374, 0.587240)
Mean exploration (tot, MA): (0.564043, 0.029367)

im_detect: 107/150 0.645s 0.177s
Mean #fix/img (tot, MA):    (11.287037, 0.592946)
Mean exploration (tot, MA): (0.564610, 0.029665)

im_detect: 108/150 0.646s 0.177s
Mean #fix/img (tot, MA):    (11.293578, 0.598650)
Mean exploration (tot, MA): (0.564973, 0.029953)

im_detect: 109/150 0.646s 0.177s
Mean #fix/img (tot, MA):    (11.300000, 0.604350)
Mean exploration (tot, MA): (0.565502, 0.030249)

im_detect: 110/150 0.646s 0.178s
Mean #fix/img (tot, MA):    (11.207208, 0.604548)
Mean exploration (tot, MA): (0.560787, 0.030255)

im_detect: 111/150 0.641s 0.176s
Mean #fix/img (tot, MA):    (11.116072, 0.604746)
Mean exploration (tot, MA): (0.556156, 0.030261)

im_detect: 112/150 0.636s 0.175s
Mean #fix/img (tot, MA):    (11.123894, 0.610443)
Mean exploration (tot, MA): (0.556423, 0.030539)

im_detect: 113/150 0.636s 0.175s
Mean #fix/img (tot, MA):    (11.131578, 0.616138)
Mean exploration (tot, MA): (0.556676, 0.030816)

im_detect: 114/150 0.637s 0.175s
Mean #fix/img (tot, MA):    (11.139130, 0.621830)
Mean exploration (tot, MA): (0.557071, 0.031102)

im_detect: 115/150 0.637s 0.175s
Mean #fix/img (tot, MA):    (11.146551, 0.627519)
Mean exploration (tot, MA): (0.557423, 0.031386)

im_detect: 116/150 0.637s 0.175s
Mean #fix/img (tot, MA):    (11.153846, 0.633205)
Mean exploration (tot, MA): (0.557859, 0.031674)

im_detect: 117/150 0.637s 0.175s
Mean #fix/img (tot, MA):    (11.161016, 0.638889)
Mean exploration (tot, MA): (0.558073, 0.031950)

im_detect: 118/150 0.637s 0.175s
Mean #fix/img (tot, MA):    (11.168067, 0.644569)
Mean exploration (tot, MA): (0.558594, 0.032244)

im_detect: 119/150 0.638s 0.175s
Mean #fix/img (tot, MA):    (11.175000, 0.650247)
Mean exploration (tot, MA): (0.559140, 0.032540)

im_detect: 120/150 0.638s 0.176s
Mean #fix/img (tot, MA):    (11.181818, 0.655922)
Mean exploration (tot, MA): (0.559626, 0.032832)

im_detect: 121/150 0.638s 0.176s
Mean #fix/img (tot, MA):    (11.188524, 0.661594)
Mean exploration (tot, MA): (0.559776, 0.033105)

im_detect: 122/150 0.638s 0.176s
Mean #fix/img (tot, MA):    (11.195122, 0.667263)
Mean exploration (tot, MA): (0.560068, 0.033386)

im_detect: 123/150 0.639s 0.176s
Mean #fix/img (tot, MA):    (11.201612, 0.672930)
Mean exploration (tot, MA): (0.560441, 0.033673)

im_detect: 124/150 0.639s 0.176s
Mean #fix/img (tot, MA):    (11.207999, 0.678593)
Mean exploration (tot, MA): (0.560345, 0.033930)

im_detect: 125/150 0.639s 0.176s
Mean #fix/img (tot, MA):    (11.214285, 0.684254)
Mean exploration (tot, MA): (0.560685, 0.034215)

im_detect: 126/150 0.639s 0.176s
Mean #fix/img (tot, MA):    (11.220471, 0.689912)
Mean exploration (tot, MA): (0.561194, 0.034510)

im_detect: 127/150 0.639s 0.176s
Mean #fix/img (tot, MA):    (11.226562, 0.695567)
Mean exploration (tot, MA): (0.561571, 0.034798)

im_detect: 128/150 0.640s 0.177s
Mean #fix/img (tot, MA):    (11.147285, 0.695719)
Mean exploration (tot, MA): (0.557707, 0.034812)

im_detect: 129/150 0.636s 0.175s
Mean #fix/img (tot, MA):    (11.069229, 0.695871)
Mean exploration (tot, MA): (0.553903, 0.034826)

im_detect: 130/150 0.632s 0.174s
Mean #fix/img (tot, MA):    (11.076334, 0.701523)
Mean exploration (tot, MA): (0.554311, 0.035112)

im_detect: 131/150 0.632s 0.174s
Mean #fix/img (tot, MA):    (11.083331, 0.707172)
Mean exploration (tot, MA): (0.554498, 0.035384)

im_detect: 132/150 0.632s 0.174s
Mean #fix/img (tot, MA):    (11.090223, 0.712819)
Mean exploration (tot, MA): (0.555053, 0.035681)

im_detect: 133/150 0.632s 0.174s
Mean #fix/img (tot, MA):    (11.014923, 0.712962)
Mean exploration (tot, MA): (0.551382, 0.035695)

im_detect: 134/150 0.628s 0.173s
Mean #fix/img (tot, MA):    (11.022220, 0.718606)
Mean exploration (tot, MA): (0.551938, 0.035990)

im_detect: 135/150 0.629s 0.173s
Mean #fix/img (tot, MA):    (11.029409, 0.724247)
Mean exploration (tot, MA): (0.552531, 0.036288)

im_detect: 136/150 0.629s 0.174s
Mean #fix/img (tot, MA):    (11.036494, 0.729884)
Mean exploration (tot, MA): (0.552993, 0.036578)

im_detect: 137/150 0.630s 0.174s
Mean #fix/img (tot, MA):    (11.043476, 0.735520)
Mean exploration (tot, MA): (0.553387, 0.036863)

im_detect: 138/150 0.630s 0.174s
Mean #fix/img (tot, MA):    (11.050358, 0.741152)
Mean exploration (tot, MA): (0.553904, 0.037158)

im_detect: 139/150 0.630s 0.174s
Mean #fix/img (tot, MA):    (11.057141, 0.746781)
Mean exploration (tot, MA): (0.554459, 0.037455)

im_detect: 140/150 0.631s 0.174s
Mean #fix/img (tot, MA):    (11.063828, 0.752408)
Mean exploration (tot, MA): (0.555095, 0.037758)

im_detect: 141/150 0.631s 0.175s
Mean #fix/img (tot, MA):    (11.070421, 0.758032)
Mean exploration (tot, MA): (0.555278, 0.038030)

im_detect: 142/150 0.631s 0.175s
Mean #fix/img (tot, MA):    (11.076921, 0.763653)
Mean exploration (tot, MA): (0.555723, 0.038320)

im_detect: 143/150 0.632s 0.175s
Mean #fix/img (tot, MA):    (11.083332, 0.769271)
Mean exploration (tot, MA): (0.555928, 0.038594)

im_detect: 144/150 0.632s 0.175s
Mean #fix/img (tot, MA):    (11.089654, 0.774886)
Mean exploration (tot, MA): (0.556189, 0.038871)

im_detect: 145/150 0.632s 0.175s
Mean #fix/img (tot, MA):    (11.095889, 0.780499)
Mean exploration (tot, MA): (0.556229, 0.039133)

im_detect: 146/150 0.632s 0.175s
Mean #fix/img (tot, MA):    (11.102039, 0.786108)
Mean exploration (tot, MA): (0.556484, 0.039410)

im_detect: 147/150 0.632s 0.175s
Mean #fix/img (tot, MA):    (11.108107, 0.791715)
Mean exploration (tot, MA): (0.556942, 0.039703)

im_detect: 148/150 0.632s 0.175s
Mean #fix/img (tot, MA):    (11.114093, 0.797319)
Mean exploration (tot, MA): (0.557231, 0.039983)

im_detect: 149/150 0.633s 0.175s
Mean #fix/img (tot, MA):    (11.119999, 0.802921)
Mean exploration (tot, MA): (0.557579, 0.040267)

im_detect: 150/150 0.633s 0.175s
Evaluating detections
Writing aeroplane Paris results file
Writing bicycle Paris results file
Writing bird Paris results file
Writing boat Paris results file
Writing bottle Paris results file
Writing bus Paris results file
Writing car Paris results file
Writing cat Paris results file
Writing chair Paris results file
Writing cow Paris results file
Writing diningtable Paris results file
Writing dog Paris results file
Writing horse Paris results file
Writing motorbike Paris results file
Writing person Paris results file
Writing pottedplant Paris results file
Writing sheep Paris results file
Writing sofa Paris results file
Writing train Paris results file
Writing tvmonitor Paris results file
/home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/datasets/paris_eval.py:221: RuntimeWarning: invalid value encountered in true_divide
  rec = tp / float(npos)
AP for aeroplane = nan
AP for bicycle = nan
AP for bird = nan
AP for boat = nan
AP for bottle = nan
AP for bus = nan
AP for car = nan
AP for cat = nan
AP for chair = nan
AP for cow = nan
AP for diningtable = nan
AP for dog = nan
AP for horse = nan
AP for motorbike = nan
AP for person = 0.2246
AP for pottedplant = nan
AP for sheep = nan
AP for sofa = nan
AP for train = nan
AP for tvmonitor = nan
Mean AP = nan
~~~~~~~~
Results:
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
0.225
nan
nan
nan
nan
nan
nan
~~~~~~~~

--------------------------------------------------------------
Results computed with the **unofficial** Python eval code.
Results should be very close to the official MATLAB eval code.
Recompute with `./tools/reval.py --matlab ...` for your paper.
-- Thanks, The Management
--------------------------------------------------------------
106.74user 25.42system 2:14.60elapsed 98%CPU (0avgtext+0avgdata 3787792maxresident)k
107752inputs+2632outputs (4major+874973minor)pagefaults 0swaps

+ echo Logging output to experiments/logs/test/vgg16_paris_train_paris_val_.txt.2019-03-26_23-50-35
Logging output to experiments/logs/test/vgg16_paris_train_paris_val_.txt.2019-03-26_23-50-35
+ case ${DATASET} in
+ WEIGHTS_PATH=/home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt
+ [[ ! -z '' ]]
+ CUDA_VISIBLE_DEVICES=0
+ time python ./tools/test_net.py --imdb paris_val --model /home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt --cfg experiments/cfgs/drl-rpn-vgg16.yml --net vgg16 --use_hist 1 --use_post 0 --nbr_fix 0 --set NBR_CLASSES 21 ANCHOR_SCALES '[4,8,16]' ANCHOR_RATIOS '[0.5,1,2]'
Called with args:
Namespace(cfg_file='experiments/cfgs/drl-rpn-vgg16.yml', comp_mode=False, imdb_name='paris_val', max_per_image=100, model='/home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt', nbr_fix=0, net='vgg16', set_cfgs=['NBR_CLASSES', '21', 'ANCHOR_SCALES', '[4,8,16]', 'ANCHOR_RATIOS', '[0.5,1,2]'], tag='', use_hist=1, use_post=0)
Using config:
{'ANCHOR_RATIOS': [0.5, 1, 2],
 'ANCHOR_SCALES': [4, 8, 16],
 'CLASS_NAMES': [],
 'COCO_TO_PASCAL': [0,
                    5,
                    2,
                    15,
                    9,
                    40,
                    6,
                    3,
                    16,
                    57,
                    20,
                    61,
                    17,
                    18,
                    4,
                    1,
                    59,
                    19,
                    58,
                    7,
                    63],
 'DATA_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf/data',
 'DIMS_AUX': 39,
 'DIMS_BASE': 512,
 'DIMS_NONHIST': 530,
 'DIMS_TOT': 551,
 'DRL_RPN': {'H_FIXRECT': 0.25,
             'H_HIST': 3,
             'H_SCALE': 0.5,
             'MAX_ITER_TRAJ': 13,
             'MAX_ITER_TRAJ_FLT': 13.0,
             'TOPK_OBJNESS': 0,
             'USE_AGNO': False,
             'USE_HIST': True,
             'USE_POST': False,
             'W_FIXRECT': 0.25,
             'W_HIST': 3,
             'W_SCALE': 0.5},
 'DRL_RPN_TEST': {'BETA': 0.05,
                  'DO_VISUALIZE': False,
                  'NBR_FIX': 0,
                  'RANDOM_DONE': False,
                  'RANDOM_FIX': False},
 'DRL_RPN_TRAIN': {'BATCH_SIZE': 50,
                   'BETAS': [0.05, 0.35],
                   'DET_START': -1,
                   'DISPLAY': 50,
                   'GAMMA': 0.2,
                   'IMG_START_IDX': -1,
                   'IOU_THRESH': 0.5,
                   'LEARNING_RATE': 2e-05,
                   'MA_WEIGHT': 0.0005,
                   'POST_BETAS': [0.05, 0.35],
                   'POST_LR': 0.001,
                   'POST_SS': [80000],
                   'STEPSIZE': 90000,
                   'USE_BL': True,
                   'USE_FLIPPED': True,
                   'USE_POST': 0},
 'EXP_DIR': 'vgg16_drl_rpn',
 'MATLAB': 'matlab',
 'MEANS_BBOX': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'NBR_ANCHORS': 9,
 'NBR_CLASSES': 21,
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'POOLING_MODE': 'crop',
 'POOLING_SIZE': 7,
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf',
 'RPN_CHANNELS': 512,
 'STDS_BBOX': array([0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1,
       0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1,
       0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2,
       0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2,
       0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1,
       0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1,
       0.2, 0.2, 0.1, 0.1, 0.2, 0.2]),
 'TEST': {'BBOX_REG': True,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'MODE': 'nms',
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'gt',
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'RPN_TOP_N': 5000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': False,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'BIAS_DECAY': False,
           'DISPLAY': 50,
           'DOUBLE_BIAS': False,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.00025,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 128,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_KEPT': 3,
           'SNAPSHOT_PREFIX': 'vgg16_drl_rpn',
           'STEPSIZE': [80000],
           'SUMMARY_INTERVAL': 180,
           'TRUNCATED': False,
           'USE_ALL_GT': True,
           'USE_FLIPPED': True,
           'USE_GT': False,
           'WEIGHT_DECAY': 0.0001},
 'USE_GPU_NMS': True,
 'VIS_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf/img-out'}
paris_val
2019-03-26 23:50:45.420713: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcuda.so.1
2019-03-26 23:50:45.527969: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1009] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-03-26 23:50:45.549718: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5650fc6aae70 executing computations on platform CUDA. Devices:
2019-03-26 23:50:45.549755: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): GeForce RTX 2070, Compute Capability 7.5
2019-03-26 23:50:45.570699: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3400030000 Hz
2019-03-26 23:50:45.571077: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5650fc7593b0 executing computations on platform Host. Devices:
2019-03-26 23:50:45.571117: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): <undefined>, <undefined>
2019-03-26 23:50:45.572082: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1551] Found device 0 with properties: 
name: GeForce RTX 2070 major: 7 minor: 5 memoryClockRate(GHz): 1.62
pciBusID: 0000:01:00.0
totalMemory: 7.76GiB freeMemory: 7.16GiB
2019-03-26 23:50:45.572122: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1674] Adding visible gpu devices: 0
2019-03-26 23:50:45.572217: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudart.so.10.0
2019-03-26 23:50:45.574127: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1082] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-03-26 23:50:45.574157: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1088]      0 
2019-03-26 23:50:45.574171: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1101] 0:   N 
2019-03-26 23:50:45.574874: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1222] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 6963 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2070, pci bus id: 0000:01:00.0, compute capability: 7.5)
WARNING: Logging before flag parsing goes to stderr.
W0326 23:50:45.790807 140373155854144 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:222: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.cast` instead.
W0326 23:50:45.795200 140373155854144 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:231: py_func (from tensorflow.python.ops.script_ops) is deprecated and will be removed in a future version.
Instructions for updating:
tf.py_func is deprecated in TF V2. Instead, there are two
    options available in V2.
    - tf.py_function takes a python function which manipulates tf eager
    tensors instead of numpy arrays. It's easy to convert a tf eager tensor to
    an ndarray (just call tensor.numpy()) but having access to eager tensors
    means `tf.py_function`s can use accelerators such as GPUs as well as
    being differentiable using a gradient tape.
    - tf.numpy_function maintains the semantics of the deprecated tf.py_func
    (it is not differentiable, and manipulates numpy arrays). It drops the
    stateful argument making all functions stateful.
    
W0326 23:50:45.873085 140373155854144 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:128: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.cast` instead.
W0326 23:50:45.888412 140373155854144 deprecation.py:506] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:141: calling crop_and_resize_v1 (from tensorflow.python.ops.image_ops_impl) with box_ind is deprecated and will be removed in a future version.
Instructions for updating:
box_ind is deprecated, use box_indices instead
W0326 23:50:45.891425 140373155854144 deprecation.py:323] From /home/vador/anaconda3/envs/tf10/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/layers.py:1624: flatten (from tensorflow.python.layers.core) is deprecated and will be removed in a future version.
Instructions for updating:
Use keras.layers.flatten instead.
Loading model check point from /home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt
W0326 23:50:46.241355 140373155854144 deprecation.py:323] From /home/vador/anaconda3/envs/tf10/lib/python3.6/site-packages/tensorflow/python/training/saver.py:1276: checkpoint_exists (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.
Instructions for updating:
Use standard file APIs to check for files with this prefix.
Loaded.
paris_val gt roidb loaded from /home/vador/Documents/project/AI/drl-rpn-tf/data/cache/paris_val_gt_roidb.pkl
2019-03-26 23:50:47.273365: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudnn.so.7
2019-03-26 23:50:48.641848: E tensorflow/stream_executor/cuda/cuda_driver.cc:835] failed to allocate 3.67G (3945080320 bytes) from device: CUDA_ERROR_OUT_OF_MEMORY: out of memory
2019-03-26 23:50:49.632769: E tensorflow/core/grappler/optimizers/dependency_optimizer.cc:697] Iteration = 0, topological sort failed with message: The graph couldn't be sorted in topological order.
2019-03-26 23:50:49.633808: E tensorflow/core/grappler/optimizers/dependency_optimizer.cc:697] Iteration = 1, topological sort failed with message: The graph couldn't be sorted in topological order.
2019-03-26 23:50:49.662335: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcublas.so.10.0
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 1/150 2.808s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 2/150 1.435s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 3/150 0.977s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 4/150 0.748s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 5/150 0.611s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 6/150 0.519s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 7/150 0.454s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 8/150 0.405s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 9/150 0.366s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 10/150 0.335s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 11/150 0.310s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 12/150 0.289s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 13/150 0.272s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 14/150 0.257s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 15/150 0.244s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 16/150 0.232s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 17/150 0.222s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 18/150 0.213s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 19/150 0.205s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 20/150 0.198s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 21/150 0.192s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 22/150 0.186s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 23/150 0.180s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 24/150 0.175s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 25/150 0.171s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 26/150 0.166s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 27/150 0.162s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 28/150 0.159s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 29/150 0.155s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 30/150 0.152s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 31/150 0.149s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 32/150 0.146s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 33/150 0.144s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 34/150 0.141s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 35/150 0.139s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 36/150 0.137s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 37/150 0.135s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 38/150 0.133s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 39/150 0.131s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 40/150 0.129s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 41/150 0.127s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 42/150 0.126s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 43/150 0.124s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 44/150 0.123s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 45/150 0.121s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 46/150 0.120s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 47/150 0.119s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 48/150 0.118s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 49/150 0.116s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 50/150 0.115s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 51/150 0.114s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 52/150 0.113s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 53/150 0.112s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 54/150 0.111s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 55/150 0.110s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 56/150 0.109s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 57/150 0.108s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 58/150 0.107s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 59/150 0.107s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 60/150 0.106s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 61/150 0.105s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 62/150 0.104s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 63/150 0.104s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 64/150 0.103s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 65/150 0.102s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 66/150 0.102s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 67/150 0.101s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 68/150 0.100s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 69/150 0.100s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 70/150 0.099s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 71/150 0.099s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 72/150 0.098s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 73/150 0.098s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 74/150 0.097s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 75/150 0.097s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 76/150 0.096s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 77/150 0.096s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 78/150 0.095s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 79/150 0.095s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 80/150 0.094s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 81/150 0.094s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 82/150 0.093s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 83/150 0.093s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 84/150 0.093s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 85/150 0.092s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 86/150 0.092s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 87/150 0.091s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 88/150 0.091s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 89/150 0.091s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 90/150 0.090s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 91/150 0.090s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 92/150 0.090s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 93/150 0.089s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 94/150 0.089s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 95/150 0.089s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 96/150 0.089s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 97/150 0.088s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 98/150 0.088s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 99/150 0.088s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 100/150 0.087s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 101/150 0.087s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 102/150 0.087s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 103/150 0.087s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 104/150 0.086s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 105/150 0.086s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 106/150 0.086s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 107/150 0.086s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 108/150 0.085s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 109/150 0.085s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 110/150 0.085s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 111/150 0.085s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 112/150 0.084s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 113/150 0.084s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 114/150 0.084s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 115/150 0.084s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 116/150 0.084s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 117/150 0.083s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 118/150 0.083s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 119/150 0.083s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 120/150 0.083s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 121/150 0.083s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 122/150 0.082s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 123/150 0.082s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 124/150 0.082s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 125/150 0.082s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 126/150 0.082s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 127/150 0.082s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 128/150 0.081s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 129/150 0.081s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 130/150 0.081s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 131/150 0.081s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 132/150 0.081s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 133/150 0.081s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 134/150 0.080s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 135/150 0.080s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 136/150 0.080s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 137/150 0.080s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 138/150 0.080s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 139/150 0.080s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 140/150 0.079s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 141/150 0.079s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 142/150 0.079s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 143/150 0.079s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 144/150 0.079s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 145/150 0.079s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 146/150 0.079s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 147/150 0.079s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 148/150 0.078s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 149/150 0.078s 0.001s
Mean #fix/img (tot, MA):    (0.000000, 0.000000)
Mean exploration (tot, MA): (0.000000, 0.000000)

im_detect: 150/150 0.078s 0.001s
Evaluating detections
Writing aeroplane Paris results file
Writing bicycle Paris results file
Writing bird Paris results file
Writing boat Paris results file
Writing bottle Paris results file
Writing bus Paris results file
Writing car Paris results file
Writing cat Paris results file
Writing chair Paris results file
Writing cow Paris results file
Writing diningtable Paris results file
Writing dog Paris results file
Writing horse Paris results file
Writing motorbike Paris results file
Writing person Paris results file
Writing pottedplant Paris results file
Writing sheep Paris results file
Writing sofa Paris results file
Writing train Paris results file
Writing tvmonitor Paris results file
AP for aeroplane = 0.0000
AP for bicycle = 0.0000
AP for bird = 0.0000
AP for boat = 0.0000
AP for bottle = 0.0000
AP for bus = 0.0000
AP for car = 0.0000
AP for cat = 0.0000
AP for chair = 0.0000
AP for cow = 0.0000
AP for diningtable = 0.0000
AP for dog = 0.0000
AP for horse = 0.0000
AP for motorbike = 0.0000
AP for person = 0.0000
AP for pottedplant = 0.0000
AP for sheep = 0.0000
AP for sofa = 0.0000
AP for train = 0.0000
AP for tvmonitor = 0.0000
Mean AP = 0.0000
~~~~~~~~
Results:
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
~~~~~~~~

--------------------------------------------------------------
Results computed with the **unofficial** Python eval code.
Results should be very close to the official MATLAB eval code.
Recompute with `./tools/reval.py --matlab ...` for your paper.
-- Thanks, The Management
--------------------------------------------------------------
12.00user 3.10system 0:25.29elapsed 59%CPU (0avgtext+0avgdata 3772348maxresident)k
96680inputs+352outputs (284major+862981minor)pagefaults 0swaps

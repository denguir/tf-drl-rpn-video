+ echo Logging output to experiments/logs/test/vgg16_paris_train_paris_val_.txt.2019-03-28_21-44-38
Logging output to experiments/logs/test/vgg16_paris_train_paris_val_.txt.2019-03-28_21-44-38
+ case ${DATASET} in
+ WEIGHTS_PATH=/home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt
+ [[ ! -z '' ]]
+ CUDA_VISIBLE_DEVICES=0
+ time python ./tools/test_net.py --imdb paris_val --model /home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt --cfg experiments/cfgs/drl-rpn-vgg16.yml --net vgg16 --use_hist 1 --use_post 0 --nbr_fix 13 --set NBR_CLASSES 21 ANCHOR_SCALES '[4,8,16]' ANCHOR_RATIOS '[0.5,1,2]'
Called with args:
Namespace(cfg_file='experiments/cfgs/drl-rpn-vgg16.yml', comp_mode=False, imdb_name='paris_val', max_per_image=100, model='/home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt', nbr_fix=13, net='vgg16', set_cfgs=['NBR_CLASSES', '21', 'ANCHOR_SCALES', '[4,8,16]', 'ANCHOR_RATIOS', '[0.5,1,2]'], tag='', use_hist=1, use_post=0)
Using config:
{'ANCHOR_RATIOS': [0.5, 1, 2],
 'ANCHOR_SCALES': [4, 8, 16],
 'CLASS_NAMES': [],
 'COCO_TO_PASCAL': [0,
                    5,
                    2,
                    15,
                    9,
                    40,
                    6,
                    3,
                    16,
                    57,
                    20,
                    61,
                    17,
                    18,
                    4,
                    1,
                    59,
                    19,
                    58,
                    7,
                    63],
 'DATA_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf/data',
 'DIMS_AUX': 39,
 'DIMS_BASE': 512,
 'DIMS_NONHIST': 530,
 'DIMS_TOT': 551,
 'DRL_RPN': {'H_FIXRECT': 0.25,
             'H_HIST': 3,
             'H_SCALE': 0.5,
             'MAX_ITER_TRAJ': 13,
             'MAX_ITER_TRAJ_FLT': 13.0,
             'TOPK_OBJNESS': 0,
             'USE_AGNO': False,
             'USE_HIST': True,
             'USE_POST': False,
             'W_FIXRECT': 0.25,
             'W_HIST': 3,
             'W_SCALE': 0.5},
 'DRL_RPN_TEST': {'BETA': 0.05,
                  'DO_VISUALIZE': False,
                  'NBR_FIX': 0,
                  'RANDOM_DONE': False,
                  'RANDOM_FIX': False},
 'DRL_RPN_TRAIN': {'BATCH_SIZE': 50,
                   'BETAS': [0.05, 0.35],
                   'DET_START': -1,
                   'DISPLAY': 50,
                   'GAMMA': 0.2,
                   'IMG_START_IDX': -1,
                   'IOU_THRESH': 0.5,
                   'LEARNING_RATE': 2e-05,
                   'MA_WEIGHT': 0.0005,
                   'POST_BETAS': [0.05, 0.35],
                   'POST_LR': 0.001,
                   'POST_SS': [80000],
                   'STEPSIZE': 90000,
                   'USE_BL': True,
                   'USE_FLIPPED': True,
                   'USE_POST': 0},
 'EXP_DIR': 'vgg16_drl_rpn',
 'MATLAB': 'matlab',
 'MEANS_BBOX': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'NBR_ANCHORS': 9,
 'NBR_CLASSES': 21,
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'POOLING_MODE': 'crop',
 'POOLING_SIZE': 7,
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf',
 'RPN_CHANNELS': 512,
 'STDS_BBOX': array([0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1,
       0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1,
       0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2,
       0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2,
       0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1,
       0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1,
       0.2, 0.2, 0.1, 0.1, 0.2, 0.2]),
 'TEST': {'BBOX_REG': True,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'MODE': 'nms',
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'gt',
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'RPN_TOP_N': 5000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': False,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'BIAS_DECAY': False,
           'DISPLAY': 50,
           'DOUBLE_BIAS': False,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.00025,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 128,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_KEPT': 3,
           'SNAPSHOT_PREFIX': 'vgg16_drl_rpn',
           'STEPSIZE': [80000],
           'SUMMARY_INTERVAL': 180,
           'TRUNCATED': False,
           'USE_ALL_GT': True,
           'USE_FLIPPED': True,
           'USE_GT': False,
           'WEIGHT_DECAY': 0.0001},
 'USE_GPU_NMS': True,
 'VIS_DIR': '/home/vador/Documents/project/AI/drl-rpn-tf/img-out'}
paris_val
2019-03-28 21:44:40.430518: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcuda.so.1
2019-03-28 21:44:40.536487: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1009] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-03-28 21:44:40.537530: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x562b9cbdded0 executing computations on platform CUDA. Devices:
2019-03-28 21:44:40.537560: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): GeForce RTX 2070, Compute Capability 7.5
2019-03-28 21:44:40.558703: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3400040000 Hz
2019-03-28 21:44:40.558971: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x562b9cc8c410 executing computations on platform Host. Devices:
2019-03-28 21:44:40.558997: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): <undefined>, <undefined>
2019-03-28 21:44:40.559822: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1551] Found device 0 with properties: 
name: GeForce RTX 2070 major: 7 minor: 5 memoryClockRate(GHz): 1.62
pciBusID: 0000:01:00.0
totalMemory: 7.76GiB freeMemory: 7.22GiB
2019-03-28 21:44:40.559851: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1674] Adding visible gpu devices: 0
2019-03-28 21:44:40.559925: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudart.so.10.0
2019-03-28 21:44:40.561800: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1082] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-03-28 21:44:40.561831: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1088]      0 
2019-03-28 21:44:40.561843: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1101] 0:   N 
2019-03-28 21:44:40.562448: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1222] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 7027 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2070, pci bus id: 0000:01:00.0, compute capability: 7.5)
WARNING: Logging before flag parsing goes to stderr.
W0328 21:44:40.775550 139860771096384 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:222: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.cast` instead.
W0328 21:44:40.779940 139860771096384 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:231: py_func (from tensorflow.python.ops.script_ops) is deprecated and will be removed in a future version.
Instructions for updating:
tf.py_func is deprecated in TF V2. Instead, there are two
    options available in V2.
    - tf.py_function takes a python function which manipulates tf eager
    tensors instead of numpy arrays. It's easy to convert a tf eager tensor to
    an ndarray (just call tensor.numpy()) but having access to eager tensors
    means `tf.py_function`s can use accelerators such as GPUs as well as
    being differentiable using a gradient tape.
    - tf.numpy_function maintains the semantics of the deprecated tf.py_func
    (it is not differentiable, and manipulates numpy arrays). It drops the
    stateful argument making all functions stateful.
    
W0328 21:44:40.857252 139860771096384 deprecation.py:323] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:128: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.cast` instead.
W0328 21:44:40.872533 139860771096384 deprecation.py:506] From /home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/nets/network.py:141: calling crop_and_resize_v1 (from tensorflow.python.ops.image_ops_impl) with box_ind is deprecated and will be removed in a future version.
Instructions for updating:
box_ind is deprecated, use box_indices instead
W0328 21:44:40.875477 139860771096384 deprecation.py:323] From /home/vador/anaconda3/envs/tf10/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/layers.py:1624: flatten (from tensorflow.python.layers.core) is deprecated and will be removed in a future version.
Instructions for updating:
Use keras.layers.flatten instead.
Loading model check point from /home/vador/Documents/project/AI/drl-rpn-tf/output-weights/drl-rpn-paris/output/vgg16_drl_rpn/paris_train/vgg16_drl_rpn_iter_10000.ckpt
W0328 21:44:41.221198 139860771096384 deprecation.py:323] From /home/vador/anaconda3/envs/tf10/lib/python3.6/site-packages/tensorflow/python/training/saver.py:1276: checkpoint_exists (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.
Instructions for updating:
Use standard file APIs to check for files with this prefix.
Loaded.
paris_val gt roidb loaded from /home/vador/Documents/project/AI/drl-rpn-tf/data/cache/paris_val_gt_roidb.pkl
2019-03-28 21:44:42.200572: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudnn.so.7
2019-03-28 21:44:43.580267: E tensorflow/stream_executor/cuda/cuda_driver.cc:835] failed to allocate 3.74G (4012382464 bytes) from device: CUDA_ERROR_OUT_OF_MEMORY: out of memory
2019-03-28 21:44:44.590870: E tensorflow/core/grappler/optimizers/dependency_optimizer.cc:697] Iteration = 0, topological sort failed with message: The graph couldn't be sorted in topological order.
2019-03-28 21:44:44.592046: E tensorflow/core/grappler/optimizers/dependency_optimizer.cc:697] Iteration = 1, topological sort failed with message: The graph couldn't be sorted in topological order.
2019-03-28 21:44:44.619965: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcublas.so.10.0
Mean #fix/img (tot, MA):    (12.000000, 0.006000)
Mean exploration (tot, MA): (0.115789, 0.000058)

im_detect: 1/150 3.008s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.011997)
Mean exploration (tot, MA): (0.121053, 0.000121)

im_detect: 2/150 1.620s 0.016s
Mean #fix/img (tot, MA):    (12.000000, 0.017991)
Mean exploration (tot, MA): (0.131228, 0.000197)

im_detect: 3/150 1.162s 0.017s
Mean #fix/img (tot, MA):    (12.000000, 0.023982)
Mean exploration (tot, MA): (0.127368, 0.000255)

im_detect: 4/150 0.926s 0.016s
Mean #fix/img (tot, MA):    (12.000000, 0.029970)
Mean exploration (tot, MA): (0.125053, 0.000312)

im_detect: 5/150 0.784s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.035955)
Mean exploration (tot, MA): (0.125263, 0.000375)

im_detect: 6/150 0.692s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.041937)
Mean exploration (tot, MA): (0.116391, 0.000407)

im_detect: 7/150 0.618s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.047916)
Mean exploration (tot, MA): (0.116316, 0.000464)

im_detect: 8/150 0.568s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.053892)
Mean exploration (tot, MA): (0.116257, 0.000522)

im_detect: 9/150 0.530s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.059865)
Mean exploration (tot, MA): (0.117263, 0.000585)

im_detect: 10/150 0.500s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.065835)
Mean exploration (tot, MA): (0.117129, 0.000643)

im_detect: 11/150 0.474s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.071802)
Mean exploration (tot, MA): (0.117018, 0.000700)

im_detect: 12/150 0.454s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.077766)
Mean exploration (tot, MA): (0.117733, 0.000763)

im_detect: 13/150 0.436s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.083728)
Mean exploration (tot, MA): (0.118346, 0.000826)

im_detect: 14/150 0.421s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.089686)
Mean exploration (tot, MA): (0.115719, 0.000865)

im_detect: 15/150 0.405s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.095641)
Mean exploration (tot, MA): (0.116382, 0.000928)

im_detect: 16/150 0.395s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.101593)
Mean exploration (tot, MA): (0.118328, 0.001002)

im_detect: 17/150 0.386s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.107542)
Mean exploration (tot, MA): (0.120058, 0.001076)

im_detect: 18/150 0.378s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.113488)
Mean exploration (tot, MA): (0.119834, 0.001133)

im_detect: 19/150 0.370s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.119432)
Mean exploration (tot, MA): (0.121316, 0.001208)

im_detect: 20/150 0.364s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.125372)
Mean exploration (tot, MA): (0.121053, 0.001265)

im_detect: 21/150 0.357s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.131309)
Mean exploration (tot, MA): (0.120813, 0.001322)

im_detect: 22/150 0.350s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.137244)
Mean exploration (tot, MA): (0.120595, 0.001379)

im_detect: 23/150 0.344s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.143175)
Mean exploration (tot, MA): (0.120395, 0.001437)

im_detect: 24/150 0.339s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.149103)
Mean exploration (tot, MA): (0.121516, 0.001510)

im_detect: 25/150 0.335s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.155029)
Mean exploration (tot, MA): (0.121296, 0.001567)

im_detect: 26/150 0.331s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.160951)
Mean exploration (tot, MA): (0.120741, 0.001620)

im_detect: 27/150 0.326s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.166871)
Mean exploration (tot, MA): (0.120226, 0.001672)

im_detect: 28/150 0.322s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.172787)
Mean exploration (tot, MA): (0.120436, 0.001734)

im_detect: 29/150 0.319s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.178701)
Mean exploration (tot, MA): (0.120632, 0.001797)

im_detect: 30/150 0.316s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.184612)
Mean exploration (tot, MA): (0.120475, 0.001853)

im_detect: 31/150 0.313s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.190519)
Mean exploration (tot, MA): (0.120329, 0.001910)

im_detect: 32/150 0.310s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.196424)
Mean exploration (tot, MA): (0.119904, 0.001963)

im_detect: 33/150 0.307s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.202326)
Mean exploration (tot, MA): (0.119783, 0.002020)

im_detect: 34/150 0.304s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.208225)
Mean exploration (tot, MA): (0.122165, 0.002120)

im_detect: 35/150 0.304s 0.016s
Mean #fix/img (tot, MA):    (12.000000, 0.214121)
Mean exploration (tot, MA): (0.122281, 0.002182)

im_detect: 36/150 0.302s 0.016s
Mean #fix/img (tot, MA):    (12.000000, 0.220014)
Mean exploration (tot, MA): (0.120683, 0.002213)

im_detect: 37/150 0.298s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.225904)
Mean exploration (tot, MA): (0.119307, 0.002246)

im_detect: 38/150 0.295s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.231791)
Mean exploration (tot, MA): (0.118003, 0.002279)

im_detect: 39/150 0.292s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.237675)
Mean exploration (tot, MA): (0.117947, 0.002336)

im_detect: 40/150 0.291s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.243556)
Mean exploration (tot, MA): (0.117766, 0.002390)

im_detect: 41/150 0.289s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.249434)
Mean exploration (tot, MA): (0.117970, 0.002452)

im_detect: 42/150 0.287s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.255309)
Mean exploration (tot, MA): (0.118164, 0.002514)

im_detect: 43/150 0.286s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.261182)
Mean exploration (tot, MA): (0.118110, 0.002570)

im_detect: 44/150 0.285s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.267051)
Mean exploration (tot, MA): (0.118292, 0.002632)

im_detect: 45/150 0.283s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.272918)
Mean exploration (tot, MA): (0.119199, 0.002711)

im_detect: 46/150 0.283s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.278781)
Mean exploration (tot, MA): (0.118343, 0.002749)

im_detect: 47/150 0.281s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.284642)
Mean exploration (tot, MA): (0.117522, 0.002787)

im_detect: 48/150 0.279s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.290499)
Mean exploration (tot, MA): (0.117701, 0.002849)

im_detect: 49/150 0.278s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.296354)
Mean exploration (tot, MA): (0.118337, 0.002922)

im_detect: 50/150 0.277s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.302206)
Mean exploration (tot, MA): (0.117255, 0.002952)

im_detect: 51/150 0.275s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.308055)
Mean exploration (tot, MA): (0.117429, 0.003014)

im_detect: 52/150 0.274s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.313901)
Mean exploration (tot, MA): (0.117398, 0.003070)

im_detect: 53/150 0.273s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.319744)
Mean exploration (tot, MA): (0.117563, 0.003132)

im_detect: 54/150 0.273s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.325584)
Mean exploration (tot, MA): (0.117722, 0.003194)

im_detect: 55/150 0.272s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.331421)
Mean exploration (tot, MA): (0.116748, 0.003224)

im_detect: 56/150 0.270s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.337256)
Mean exploration (tot, MA): (0.116916, 0.003285)

im_detect: 57/150 0.269s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.343087)
Mean exploration (tot, MA): (0.115989, 0.003315)

im_detect: 58/150 0.268s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.348915)
Mean exploration (tot, MA): (0.114915, 0.003340)

im_detect: 59/150 0.266s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.354741)
Mean exploration (tot, MA): (0.114930, 0.003396)

im_detect: 60/150 0.265s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.360564)
Mean exploration (tot, MA): (0.114081, 0.003426)

im_detect: 61/150 0.264s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.366383)
Mean exploration (tot, MA): (0.113260, 0.003456)

im_detect: 62/150 0.262s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.372200)
Mean exploration (tot, MA): (0.113467, 0.003517)

im_detect: 63/150 0.262s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.378014)
Mean exploration (tot, MA): (0.113668, 0.003578)

im_detect: 64/150 0.261s 0.015s
Mean #fix/img (tot, MA):    (12.000000, 0.383825)
Mean exploration (tot, MA): (0.112891, 0.003608)

im_detect: 65/150 0.260s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.389633)
Mean exploration (tot, MA): (0.112137, 0.003638)

im_detect: 66/150 0.259s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.395438)
Mean exploration (tot, MA): (0.111406, 0.003668)

im_detect: 67/150 0.258s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.401241)
Mean exploration (tot, MA): (0.111625, 0.003729)

im_detect: 68/150 0.257s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.407040)
Mean exploration (tot, MA): (0.110923, 0.003759)

im_detect: 69/150 0.256s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.412836)
Mean exploration (tot, MA): (0.110241, 0.003789)

im_detect: 70/150 0.255s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.418630)
Mean exploration (tot, MA): (0.109429, 0.003813)

im_detect: 71/150 0.254s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.424421)
Mean exploration (tot, MA): (0.108860, 0.003845)

im_detect: 72/150 0.253s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.430208)
Mean exploration (tot, MA): (0.108450, 0.003883)

im_detect: 73/150 0.252s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.435993)
Mean exploration (tot, MA): (0.108051, 0.003920)

im_detect: 74/150 0.251s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.441775)
Mean exploration (tot, MA): (0.107663, 0.003958)

im_detect: 75/150 0.250s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.447554)
Mean exploration (tot, MA): (0.107285, 0.003995)

im_detect: 76/150 0.249s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.453331)
Mean exploration (tot, MA): (0.106917, 0.004033)

im_detect: 77/150 0.248s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.459104)
Mean exploration (tot, MA): (0.106559, 0.004070)

im_detect: 78/150 0.248s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.464874)
Mean exploration (tot, MA): (0.106209, 0.004108)

im_detect: 79/150 0.247s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.470642)
Mean exploration (tot, MA): (0.105868, 0.004145)

im_detect: 80/150 0.246s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.476407)
Mean exploration (tot, MA): (0.105536, 0.004183)

im_detect: 81/150 0.246s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.482169)
Mean exploration (tot, MA): (0.105212, 0.004220)

im_detect: 82/150 0.245s 0.014s
Mean #fix/img (tot, MA):    (12.000000, 0.487927)
Mean exploration (tot, MA): (0.104895, 0.004257)

im_detect: 83/150 0.244s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.493683)
Mean exploration (tot, MA): (0.104586, 0.004295)

im_detect: 84/150 0.243s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.499437)
Mean exploration (tot, MA): (0.104285, 0.004332)

im_detect: 85/150 0.243s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.505187)
Mean exploration (tot, MA): (0.104308, 0.004383)

im_detect: 86/150 0.242s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.510934)
Mean exploration (tot, MA): (0.103787, 0.004410)

im_detect: 87/150 0.242s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.516679)
Mean exploration (tot, MA): (0.103624, 0.004453)

im_detect: 88/150 0.241s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.522420)
Mean exploration (tot, MA): (0.103879, 0.004514)

im_detect: 89/150 0.241s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.528159)
Mean exploration (tot, MA): (0.103719, 0.004556)

im_detect: 90/150 0.241s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.533895)
Mean exploration (tot, MA): (0.103563, 0.004599)

im_detect: 91/150 0.240s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.539628)
Mean exploration (tot, MA): (0.103410, 0.004641)

im_detect: 92/150 0.240s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.545358)
Mean exploration (tot, MA): (0.103441, 0.004692)

im_detect: 93/150 0.239s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.551086)
Mean exploration (tot, MA): (0.103796, 0.004758)

im_detect: 94/150 0.239s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.556810)
Mean exploration (tot, MA): (0.104033, 0.004819)

im_detect: 95/150 0.239s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.562532)
Mean exploration (tot, MA): (0.104057, 0.004870)

im_detect: 96/150 0.239s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.568250)
Mean exploration (tot, MA): (0.103592, 0.004897)

im_detect: 97/150 0.238s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.573966)
Mean exploration (tot, MA): (0.102975, 0.004916)

im_detect: 98/150 0.237s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.579679)
Mean exploration (tot, MA): (0.102786, 0.004955)

im_detect: 99/150 0.237s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.585390)
Mean exploration (tot, MA): (0.103126, 0.005021)

im_detect: 100/150 0.237s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.591097)
Mean exploration (tot, MA): (0.102731, 0.005050)

im_detect: 101/150 0.236s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.596801)
Mean exploration (tot, MA): (0.102549, 0.005090)

im_detect: 102/150 0.236s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.602503)
Mean exploration (tot, MA): (0.102524, 0.005137)

im_detect: 103/150 0.236s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.608202)
Mean exploration (tot, MA): (0.102864, 0.005204)

im_detect: 104/150 0.236s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.613898)
Mean exploration (tot, MA): (0.103348, 0.005278)

im_detect: 105/150 0.236s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.619591)
Mean exploration (tot, MA): (0.103247, 0.005322)

im_detect: 106/150 0.236s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.625281)
Mean exploration (tot, MA): (0.103227, 0.005370)

im_detect: 107/150 0.236s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.630968)
Mean exploration (tot, MA): (0.103148, 0.005414)

im_detect: 108/150 0.235s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.636653)
Mean exploration (tot, MA): (0.102781, 0.005443)

im_detect: 109/150 0.235s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.642334)
Mean exploration (tot, MA): (0.102565, 0.005480)

im_detect: 110/150 0.234s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.648013)
Mean exploration (tot, MA): (0.102494, 0.005524)

im_detect: 111/150 0.234s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.653689)
Mean exploration (tot, MA): (0.102406, 0.005568)

im_detect: 112/150 0.234s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.659362)
Mean exploration (tot, MA): (0.102021, 0.005595)

im_detect: 113/150 0.233s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.665033)
Mean exploration (tot, MA): (0.102142, 0.005650)

im_detect: 114/150 0.233s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.670700)
Mean exploration (tot, MA): (0.101849, 0.005681)

im_detect: 115/150 0.233s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.676365)
Mean exploration (tot, MA): (0.101561, 0.005713)

im_detect: 116/150 0.232s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.682027)
Mean exploration (tot, MA): (0.101601, 0.005763)

im_detect: 117/150 0.232s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.687686)
Mean exploration (tot, MA): (0.101641, 0.005813)

im_detect: 118/150 0.232s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.693342)
Mean exploration (tot, MA): (0.101150, 0.005832)

im_detect: 119/150 0.231s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.698995)
Mean exploration (tot, MA): (0.100798, 0.005858)

im_detect: 120/150 0.231s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.704646)
Mean exploration (tot, MA): (0.100452, 0.005885)

im_detect: 121/150 0.230s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.710293)
Mean exploration (tot, MA): (0.100112, 0.005911)

im_detect: 122/150 0.230s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.715938)
Mean exploration (tot, MA): (0.099777, 0.005938)

im_detect: 123/150 0.229s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.721580)
Mean exploration (tot, MA): (0.099830, 0.005988)

im_detect: 124/150 0.229s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.727219)
Mean exploration (tot, MA): (0.099882, 0.006038)

im_detect: 125/150 0.229s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.732856)
Mean exploration (tot, MA): (0.100008, 0.006093)

im_detect: 126/150 0.229s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.738489)
Mean exploration (tot, MA): (0.100133, 0.006148)

im_detect: 127/150 0.229s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.744120)
Mean exploration (tot, MA): (0.099918, 0.006181)

im_detect: 128/150 0.228s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.749748)
Mean exploration (tot, MA): (0.099706, 0.006215)

im_detect: 129/150 0.228s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.755373)
Mean exploration (tot, MA): (0.099498, 0.006248)

im_detect: 130/150 0.228s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.760996)
Mean exploration (tot, MA): (0.099365, 0.006286)

im_detect: 131/150 0.228s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.766615)
Mean exploration (tot, MA): (0.099490, 0.006340)

im_detect: 132/150 0.227s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.772232)
Mean exploration (tot, MA): (0.099612, 0.006395)

im_detect: 133/150 0.227s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.777846)
Mean exploration (tot, MA): (0.099662, 0.006445)

im_detect: 134/150 0.227s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.783457)
Mean exploration (tot, MA): (0.099361, 0.006471)

im_detect: 135/150 0.227s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.789065)
Mean exploration (tot, MA): (0.099063, 0.006498)

im_detect: 136/150 0.227s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.794670)
Mean exploration (tot, MA): (0.098771, 0.006524)

im_detect: 137/150 0.226s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.800273)
Mean exploration (tot, MA): (0.098482, 0.006550)

im_detect: 138/150 0.226s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.805873)
Mean exploration (tot, MA): (0.098198, 0.006576)

im_detect: 139/150 0.225s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.811470)
Mean exploration (tot, MA): (0.097917, 0.006602)

im_detect: 140/150 0.225s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.817064)
Mean exploration (tot, MA): (0.097529, 0.006621)

im_detect: 141/150 0.225s 0.013s
Mean #fix/img (tot, MA):    (12.000000, 0.822656)
Mean exploration (tot, MA): (0.097146, 0.006639)

im_detect: 142/150 0.224s 0.012s
Mean #fix/img (tot, MA):    (12.000000, 0.828244)
Mean exploration (tot, MA): (0.096945, 0.006670)

im_detect: 143/150 0.224s 0.012s
Mean #fix/img (tot, MA):    (12.000000, 0.833830)
Mean exploration (tot, MA): (0.096747, 0.006701)

im_detect: 144/150 0.224s 0.012s
Mean #fix/img (tot, MA):    (12.000000, 0.839413)
Mean exploration (tot, MA): (0.096552, 0.006732)

im_detect: 145/150 0.223s 0.012s
Mean #fix/img (tot, MA):    (12.000000, 0.844994)
Mean exploration (tot, MA): (0.096251, 0.006755)

im_detect: 146/150 0.223s 0.012s
Mean #fix/img (tot, MA):    (12.000000, 0.850571)
Mean exploration (tot, MA): (0.095954, 0.006777)

im_detect: 147/150 0.223s 0.012s
Mean #fix/img (tot, MA):    (12.000000, 0.856146)
Mean exploration (tot, MA): (0.096024, 0.006827)

im_detect: 148/150 0.223s 0.012s
Mean #fix/img (tot, MA):    (12.000000, 0.861718)
Mean exploration (tot, MA): (0.095733, 0.006850)

im_detect: 149/150 0.222s 0.012s
Mean #fix/img (tot, MA):    (12.000000, 0.867287)
Mean exploration (tot, MA): (0.095382, 0.006868)

im_detect: 150/150 0.222s 0.012s
Evaluating detections
Writing aeroplane Paris results file
Writing bicycle Paris results file
Writing bird Paris results file
Writing boat Paris results file
Writing bottle Paris results file
Writing bus Paris results file
Writing car Paris results file
Writing cat Paris results file
Writing chair Paris results file
Writing cow Paris results file
Writing diningtable Paris results file
Writing dog Paris results file
Writing horse Paris results file
Writing motorbike Paris results file
Writing person Paris results file
Writing pottedplant Paris results file
Writing sheep Paris results file
Writing sofa Paris results file
Writing train Paris results file
Writing tvmonitor Paris results file
/home/vador/Documents/project/AI/drl-rpn-tf/tools/../lib/datasets/paris_eval.py:221: RuntimeWarning: invalid value encountered in true_divide
  rec = tp / float(npos)
AP for aeroplane = nan
AP for bicycle = nan
AP for bird = nan
AP for boat = nan
AP for bottle = nan
AP for bus = nan
AP for car = nan
AP for cat = nan
AP for chair = nan
AP for cow = nan
AP for diningtable = nan
AP for dog = nan
AP for horse = nan
AP for motorbike = nan
AP for person = 0.1356
AP for pottedplant = nan
AP for sheep = nan
AP for sofa = nan
AP for train = nan
AP for tvmonitor = nan
Mean AP = nan
~~~~~~~~
Results:
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
nan
0.136
nan
nan
nan
nan
nan
nan
~~~~~~~~

--------------------------------------------------------------
Results computed with the **unofficial** Python eval code.
Results should be very close to the official MATLAB eval code.
Recompute with `./tools/reval.py --matlab ...` for your paper.
-- Thanks, The Management
--------------------------------------------------------------
34.03user 7.00system 0:40.41elapsed 101%CPU (0avgtext+0avgdata 3729588maxresident)k
0inputs+2472outputs (0major+864198minor)pagefaults 0swaps
